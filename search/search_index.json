{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CSketch","text":"<p>CSketch is a simple library to drawing shapes in C programming language.</p> <p>It doesn't have any other dependencies and renders the out as an SVG image.</p>"},{"location":"#how-to-use","title":"How to use","text":"circle.c<pre><code>#include &lt;sketch.h&gt;\n\nint main() {\n    draw_circle(0, 0, 200);\n    save_sketch(\"circle.svg\");\n}\n</code></pre> <p>And that would create a file <code>circle.svg</code> with the following image.</p> <p></p>"},{"location":"api/","title":"The API","text":"<p>The API of csketch is very simple. It has the following functions.</p> <p>Drawing fuctions:</p> <ul> <li><code>draw_line</code></li> <li><code>draw_circle</code></li> </ul> <p>Style functions:</p> <ul> <li><code>set_fill</code></li> <li><code>set_stroke</code></li> <li><code>set_stroke_width</code></li> </ul> <p>File functions:</p> <ul> <li><code>save_sketch</code></li> </ul> <p>Sketch Size:</p> <ul> <li><code>set_sketch_size</code></li> <li><code>get_sketch_width</code></li> <li><code>get_sketch_height</code></li> </ul>"},{"location":"api/#draw_line","title":"<code>draw_line</code>","text":"<pre><code>void draw_line(float x1, float y1, float x2, float y2);\n</code></pre> <p>The <code>draw_line</code> function draws a line. It takes <code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code> - the coordinates of the end points of the line.</p> <pre><code>draw_line(-200, 0, 200, 0);\ndraw_line(0, -100, 0, 100);\n</code></pre> <p></p>"},{"location":"api/#draw_circle","title":"<code>draw_circle</code>","text":"<pre><code>void draw_circle(float x, float y, float r);\n</code></pre> <p>The <code>draw_circle</code> function draws a circle with radius <code>r</code> and center at point <code>(x, y)</code>.</p> <pre><code>draw_circle(0, 0, 200);\n</code></pre> <p></p>"},{"location":"api/#set_fill","title":"<code>set_fill</code>","text":"<pre><code>void set_fill(chat *color);\n</code></pre> <p>Sets the fill color. All the shapes that are drawn after calling this function will use the new fill color.</p> <pre><code>set_fill(\"red\");\ndraw_circle(0, 0, 150);\n\nset_fill(\"green\");\ndraw_circle(0, 0, 200);\n\nset_fill(\"blue\");\ndraw_circle(0, 0, 250);\n</code></pre> <p></p>"},{"location":"api/#set_stroke","title":"<code>set_stroke</code>","text":"<pre><code>void set_stroke(chat *color);\n</code></pre> <p>Sets the stroke color. All the shapes that are drawn after calling this function will use the new stroke color.</p> <pre><code>set_stroke(\"red\");\ndraw_circle(0, 0, 250);\n\nset_stroke(\"green\");\ndraw_circle(0, 0, 200);\n\nset_stroke(\"blue\");\ndraw_circle(0, 0, 150);\n</code></pre> <p></p>"},{"location":"api/#set_stroke_width","title":"<code>set_stroke_width</code>","text":"<pre><code>void set_stroke_width(float width);\n</code></pre> <p>Sets the stroke width. All the shapes that are drawn after calling this function will use the new storoke width.</p> <pre><code>set_stroke_width(0.5);\ndraw_line(-200, 100, 200, 100);\n\nset_stroke_width(1);\ndraw_line(-200, 0, 200, 0);\n\nset_stroke_width(5);\ndraw_line(-200, -100, 200, -100);\n</code></pre> <p></p>"},{"location":"api/#save_sketch","title":"<code>save_sketch</code>","text":"<pre><code>void save_sketch(char *filename);\n</code></pre> <p>Saves all the shapes drawn so far to an svg file.</p> <pre><code>draw_circle(0, 0, 200);\nsave_sketch(\"circle.svg\");\n</code></pre> <p></p>"},{"location":"api/#sketch-size","title":"Sketch Size","text":"<p>By default the size of the sketch is set to <code>600x600</code>. You can change that by calling the <code>set_sketch_size</code> function. The current sketch size can be found by calling <code>get_sketch_width</code> and <code>get_sketch_height</code> functions.</p>"},{"location":"api/#set_sketch_size","title":"<code>set_sketch_size</code>","text":"<pre><code>void set_sketch_size(int width, int height);\n</code></pre> <p>Sets the size of the sketch.</p> <pre><code>// set the sketch width to 600 and height to 200.\nset_sketch_size(600, 200);\n\ndraw_circle(-200, 0, 100);\ndraw_circle(0, 0, 100);\ndraw_circle(200, 0, 100);\n\nsave_sketch(\"three-circle.svg\");\n</code></pre> <p></p>"},{"location":"api/#get_sketch_width","title":"<code>get_sketch_width</code>","text":"<pre><code>int get_sketch_width();\n</code></pre> <p>Returns the curent sketch width.</p> <pre><code>int w;\n\nset_sketch_size(600, 200);\n\n// draw a horizontal line\nw = get_sketch_width();\ndraw_line(-w/2, 0, w/2, 0);\n</code></pre> <p></p>"},{"location":"api/#get_sketch_height","title":"<code>get_sketch_height</code>","text":"<pre><code>int get_sketch_height();\n</code></pre> <p>Returns the curent sketch height.</p> <pre><code>int h;\n\nset_sketch_size(600, 200);\n\n// draw a vertical line\nh = get_sketch_height();\ndraw_line(0, -h/2, 0, h/2);\n</code></pre> <p></p>"},{"location":"api/#colors","title":"Colors","text":"<p>The <code>set_fill</code> and <code>set_stroke</code> function takes a color as an argument.</p> <p>Color could be specified as a name or a hexadecimal color code.</p> <p><code>red</code>, <code>blue</code>, <code>midnightblue</code>, etc. are some examples are color names.</p> <p>The special color name <code>none</code> can be used to disable stroke or fill.</p> <p>Hexadecimal color codes can be specifed as short form like <code>#fff</code> with one hex digit for each of R, G and B compoments of the color or like <code>#4B0082</code> with two hex digits for each component.</p> <p>It is also possible to include transparency by adding two additional hex digits. For example <code>#4B008280</code> is color Indigo with <code>50%</code> transparency.</p> <p>Refer to web colors for the list of valid color names and how to specify color in hexadecimal form.</p>"},{"location":"examples/","title":"Examples","text":"<p>Coming soon!</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>To use the functionality of csketch, you need to include the <code>sketch.h</code> header file.</p>"},{"location":"getting-started/#an-example","title":"An Example","text":"<p>Consider the following program circle.c that draws a circle with a radius of <code>200</code> pixels and center at point <code>(0, 0)</code>.</p> circle.c<pre><code>#include &lt;sketch.h&gt;\n\nint main()\n{\n    draw_circle(0, 0, 200);\n\n    save_sketch(\"circle.svg\");\n}\n</code></pre> <p>The first line includes the <code>sketch.h</code> header file required to use the functionality of the <code>csketch</code> library.</p> <p>The call to function <code>draw_circle</code> in line number <code>5</code>, makes a circle with the specified details.</p> <p>The last line in the function <code>main</code> is a call to <code>save_sketch</code> which write all the shapes that have been drawn earlier to an SVG file.</p>"},{"location":"getting-started/#compiling","title":"Compiling","text":"<p>To compile the program that we wrote above, we need to run the following command.</p> <pre><code>$ gcc circle.c -I sketch/ -L sketch/ -l sketch -o circle\n</code></pre> <p>The above command may look too intimidating. It is not as complex as it seems. Here is the explanation for the options passed to gcc.</p> <pre><code>gcc         # the command to run\ncircle.c    # the program to compile\n-I sketch/  # look for header files in sketch/ directory\n-L sketch/  # look for libraries in sketch/ directory\n-l sketch   # link to the sketch library, this will look for file libsketch.a\n-o circle   # write the compiled executable to file with name circle\n</code></pre> <p>Once the compilation is successful, you can run the target file created, <code>circle</code>.</p> <pre><code>$ ./circle\nSaved the sketch as circle.svg\n</code></pre> <p>Now you can open the <code>circle.svg</code> file from your file explorer. If you don't find any application to open svg files, you can open them in your web browser.</p> <p>You should see an image like this (prehaps, without the gray borders).</p> <p></p>"},{"location":"installation/","title":"Installation","text":"<p>To download and install sketch, please run the following command:</p> <pre><code>curl https://anandology.github.io/csketch/install.sh | bash\n</code></pre> <p>When you run it you'll see an output like this:</p> <pre><code>$ curl https://anandology.github.io/csketch/install.sh | bash\n---\n         __        __       __\n   _____/ /_____  / /______/ /_\n  / ___/ //_/ _ \\/ __/ ___/ __ \\\n (__  ) ,&lt; /  __/ /_/ /__/ / / /\n/____/_/|_|\\___/\\__/\\___/_/ /_/\n\n\n-&gt; Downloading and installing csketch 0.1.0\nsketch/\nsketch/sketch.h\nsketch/sketch.c\nsketch/Makefile\n\n-&gt; Building the library\nmake: Nothing to be done for 'default'.\n\n-&gt; Successfully downloaded and built the csketch 0.1.0 in /home/anand/play.\n\n-&gt; Thank you for downloading csketch.\n\n-&gt; For documentation, usage and examples, please visit:\n   https://anandology.github.io/csketch/\n</code></pre> <p>This downloads and builds the csketch library in the currently directory. It is suggest to run this command in the directory where you are planning to keep your c files.</p>"},{"location":"gallery/","title":"Gallery","text":""},{"location":"gallery/checker-board/","title":"Checker Board","text":""},{"location":"gallery/checker-board/#code","title":"Code","text":"<pre><code>#include &lt;sketch.h&gt;\n\nvoid draw_shape(float x, float y, float size, int i, int j) {\n    char *fill = (i+j)%2==1? \"black\": \"red\";\n    set_fill(fill);\n    draw_rectangle(x, y, size, size);\n}\n\nvoid make_grid(int n)\n{\n    float dx = 600/n;\n    float dy = dx;\n\n    float x0 = -300+dx/2;\n    float y0 = -300+dy/2;\n\n    for (int i=0; i&lt;n; i++)\n    {\n        for (int j=0; j&lt;n; j++)\n        {\n            float x = x0+i*dx;\n            float y = y0+j*dy;\n            draw_shape(x, y, dx, i, j);\n        }\n    }\n}\n\nint main() {\n    set_stroke(\"none\");\n    make_grid(8);\n    save_sketch(\"checker-board.svg\");\n}\n</code></pre>"},{"location":"gallery/circle/","title":"Circle","text":""},{"location":"gallery/circle/#code","title":"Code","text":"<pre><code>#include &lt;sketch.h&gt;\n\nint main() {\n    draw_circle(0, 0, 200);\n    save_sketch(\"circle.svg\");\n}\n</code></pre>"},{"location":"gallery/concentric-circles/","title":"Concentric Circles","text":""},{"location":"gallery/concentric-circles/#code","title":"Code","text":"<pre><code>#include &lt;sketch.h&gt;\n\nvoid concentric_circles(float radius, int n)\n{\n    float r = radius/n;\n\n    for (int i=1; i&lt;=n; i++) {\n        draw_circle(0, 0, i*r);\n    }\n}\n\nint main()\n{\n    concentric_circles(250, 20);\n    save_sketch(\"concentric-circles.svg\");\n}\n</code></pre>"},{"location":"gallery/donuts/","title":"Donuts","text":""},{"location":"gallery/donuts/#code","title":"Code","text":"<pre><code>#include &lt;sketch.h&gt;\n\nvoid draw_donut(float x, float y, float r)\n{\n    draw_circle(x, y, r);\n    draw_circle(x, y, r/2);\n}\n\nint main() {\n    draw_donut(0, 0, 200);\n    save_sketch(\"donuts.svg\");\n}\n</code></pre>"},{"location":"gallery/flag-of-italy/","title":"Flag of Italy","text":"<p>The Wikipedia page for Flag of Italy has the details about the colors of the flag. This little program tries to make the flag with the right colors. However, the proportations are not maintained.</p> <p>The flag of Netherlands is as equally simple. Would you like to give it a try?</p>"},{"location":"gallery/flag-of-italy/#code","title":"Code","text":"<pre><code>#include &lt;sketch.h&gt;\n\nint main()\n{\n    // Colors of Flag of Italy as mentioned on the wikipedia page\n    // https://en.wikipedia.org/wiki/Flag_of_Italy#Chromatic_definition\n\n    char *green = \"#008C45\";    // golf Green\n    char *white = \"#F4F5F0\";    // Cloud Dancer\n    char *red = \"#CD212A\";      // Tomato\n\n    set_stroke(\"none\");\n\n    set_fill(green);\n    draw_rectangle(-200, 0, 200, 600);\n\n    set_fill(white);\n    draw_rectangle(0, 0, 200, 600);\n\n    set_fill(red);\n    draw_rectangle(200, 0, 200, 600);\n\n    save_sketch(\"flag-of-italy.svg\");\n}\n</code></pre>"},{"location":"gallery/grid-of-circles/","title":"Grid of Circles","text":""},{"location":"gallery/grid-of-circles/#code","title":"Code","text":"<pre><code>#include &lt;sketch.h&gt;\n\n\nvoid draw_shape(float x, float y, float size) {\n    draw_circle(x, y, size/2);\n}\n\nvoid make_grid(int n)\n{\n    float dx = 600/n;\n    float dy = dx;\n\n    float x0 = -300+dx/2;\n    float y0 = -300+dy/2;\n\n    for (float x=x0; x&lt;300; x+=dx)\n    {\n        for (float y=y0; y&lt;300; y+=dy)\n        {\n            draw_shape(x, y, dx);\n        }\n    }\n}\n\nint main() {\n    make_grid(6);\n    save_sketch(\"grid-of-circles.svg\");\n}\n</code></pre>"},{"location":"gallery/grid-of-concentric-circles/","title":"Grid of Concentric Circles","text":""},{"location":"gallery/grid-of-concentric-circles/#code","title":"Code","text":"<pre><code>#include &lt;sketch.h&gt;\n\nfloat max(float a, float b) {\n    return a&gt;b? a: b;\n}\n\nvoid concentric_circles(float x, float y, float radius, int n)\n{\n    float r = radius/n;\n\n    for (int i=1; i&lt;=n; i++) {\n        draw_circle(x, y, i*r);\n    }\n}\n\nvoid draw_shape(float x, float y, float size, int i, int j, int n) {\n    concentric_circles(x, y, size/2, 1+max(i, j));\n}\n\nvoid make_grid(int n)\n{\n    float dx = 600/n;\n    float dy = dx;\n\n    float x0 = -300+dx/2;\n    float y0 = -300+dy/2;\n\n    for (int i=0; i&lt;n; i++)\n    {\n        for (int j=0; j&lt;n; j++)\n        {\n            float x = x0+i*dx;\n            float y = y0+j*dy;\n            draw_shape(x, y, dx, i, j, n);\n        }\n    }\n}\n\nint main() {\n    make_grid(5);\n    save_sketch(\"grid-of-concentric-circles.svg\");\n}\n</code></pre>"},{"location":"gallery/grid-of-random-concentric-circles/","title":"Grid of Random Concentric Circles","text":""},{"location":"gallery/grid-of-random-concentric-circles/#code","title":"Code","text":"<pre><code>#include &lt;sketch.h&gt;\n\nvoid random_concentric_circles(float x, float y, int radius, int n)\n{\n    for (int i=0; i&lt;n; i++) {\n        int r = 1 + rand() % radius;\n        draw_circle(x, y, r);\n    }\n}\n\nvoid draw_shape(float x, float y, float size) {\n    random_concentric_circles(x, y, size/2, 10);\n}\n\nvoid make_grid(int n)\n{\n    float dx = 600/n;\n    float dy = dx;\n\n    float x0 = -300+dx/2;\n    float y0 = -300+dy/2;\n\n    for (float x=x0; x&lt;300; x+=dx)\n    {\n        for (float y=y0; y&lt;300; y+=dy)\n        {\n            draw_shape(x, y, dx);\n        }\n    }\n}\n\nint main() {\n    make_grid(6);\n    save_sketch(\"grid-of-random-concentric-circles.svg\");\n}\n</code></pre>"},{"location":"gallery/random-concentric-circles/","title":"Random Concentric Circles","text":"<p>Concentric circles with radius of each circle picked at random.</p>"},{"location":"gallery/random-concentric-circles/#code","title":"Code","text":"<pre><code>#include &lt;sketch.h&gt;\n\nvoid random_concentric_circles(int radius, int n)\n{\n    for (int i=0; i&lt;n; i++) {\n        int r = 1 + rand() % radius;\n        draw_circle(0, 0, r);\n    }\n}\n\n\nint main()\n{\n    random_concentric_circles(250, 20);\n    save_sketch(\"random-concentric-circles.svg\");\n}\n</code></pre>"}]}